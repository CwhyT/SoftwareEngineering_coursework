{"version":3,"file":"TableManager-3ea786d6.js","sources":["../../src/components/admin/TableManager.vue"],"sourcesContent":["<template>\n  <div class=\"table-manager\">\n    <!-- 表标题和控制栏 -->\n    <div class=\"flex justify-between items-center mb-4\">\n      <h3 class=\"text-lg font-semibold\">{{ title }}</h3>\n      <div class=\"flex gap-2\">\n        <el-button type=\"primary\" size=\"small\" @click=\"refreshData\">\n          <el-icon><Refresh /></el-icon> 刷新\n        </el-button>\n        <el-button type=\"success\" size=\"small\" @click=\"handleAdd\">\n          <el-icon><Plus /></el-icon> 添加\n        </el-button>\n      </div>\n    </div>\n\n    <!-- 搜索和过滤 -->\n    <div class=\"flex flex-wrap gap-3 mb-4\">\n      <el-input\n        v-model=\"searchQuery\"\n        placeholder=\"搜索...\"\n        class=\"w-64\"\n        clearable\n        @change=\"handleSearch\"\n      >\n        <template #prefix>\n          <el-icon><Search /></el-icon>\n        </template>\n      </el-input>\n      \n      <el-select \n        v-if=\"filterOptions.length > 0\"\n        v-model=\"filterValue\" \n        placeholder=\"筛选...\" \n        class=\"w-40\"\n        clearable\n        @change=\"handleFilter\"\n      >\n        <el-option \n          v-for=\"option in filterOptions\" \n          :key=\"option.value\" \n          :label=\"option.label\" \n          :value=\"option.value\"\n        />\n      </el-select>\n    </div>\n\n    <!-- 数据表格 -->\n    <el-table\n      v-loading=\"loading\"\n      :data=\"tableData\"\n      border\n      stripe\n      style=\"width: 100%\"\n      @sort-change=\"handleSortChange\"\n    >\n      <el-table-column\n        v-for=\"column in columns\"\n        :key=\"column.prop\"\n        :prop=\"column.prop\"\n        :label=\"column.label\"\n        :sortable=\"column.sortable\"\n        :width=\"column.width\"\n      >\n        <template #default=\"scope\">\n          <!-- 自定义格式化显示字段 -->\n          <span v-if=\"column.formatter\">\n            {{ column.formatter(scope.row[column.prop], scope.row) }}\n          </span>\n          <span v-else-if=\"column.type === 'datetime' && scope.row[column.prop]\">\n            {{ formatDateTime(scope.row[column.prop]) }}\n          </span>\n          <span v-else-if=\"column.type === 'boolean'\">\n            <el-tag :type=\"scope.row[column.prop] ? 'success' : 'info'\">\n              {{ scope.row[column.prop] ? '是' : '否' }}\n            </el-tag>\n          </span>\n          <span v-else>\n            {{ scope.row[column.prop] }}\n          </span>\n        </template>\n      </el-table-column>\n      \n      <!-- 操作列 -->\n      <el-table-column label=\"操作\" width=\"150\" fixed=\"right\">\n        <template #default=\"scope\">\n          <el-button-group>\n            <el-button\n              type=\"primary\"\n              size=\"small\"\n              @click=\"handleEdit(scope.row)\"\n              text\n            >\n              <el-icon><Edit /></el-icon>\n            </el-button>\n            <el-button\n              type=\"danger\"\n              size=\"small\"\n              @click=\"handleDelete(scope.row)\"\n              text\n            >\n              <el-icon><Delete /></el-icon>\n            </el-button>\n          </el-button-group>\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <!-- 分页 -->\n    <div class=\"flex justify-end mt-4\">\n      <el-pagination\n        v-model:current-page=\"currentPage\"\n        v-model:page-size=\"pageSize\"\n        :page-sizes=\"[10, 20, 50, 100]\"\n        layout=\"total, sizes, prev, pager, next\"\n        :total=\"total\"\n        @size-change=\"handleSizeChange\"\n        @current-change=\"handleCurrentChange\"\n      />\n    </div>\n\n    <!-- 编辑/添加对话框 -->\n    <el-dialog\n      v-model=\"dialogVisible\"\n      :title=\"isEdit ? '编辑记录' : '添加记录'\"\n      width=\"600px\"\n    >\n      <el-form \n        ref=\"formRef\" \n        :model=\"form\" \n        label-width=\"120px\"\n        label-position=\"right\"\n      >\n        <el-form-item \n          v-for=\"field in formFields\" \n          :key=\"field.prop\"\n          :label=\"field.label\"\n          :prop=\"field.prop\"\n          :rules=\"field.rules\"\n        >\n          <!-- 根据字段类型渲染不同的表单控件 -->\n          <el-input \n            v-if=\"field.type === 'text' || field.type === 'number'\" \n            v-model=\"form[field.prop]\"\n            :type=\"field.type === 'number' ? 'number' : 'text'\"\n            :placeholder=\"field.placeholder || '请输入' + field.label\"\n          />\n          \n          <el-select \n            v-else-if=\"field.type === 'select'\" \n            v-model=\"form[field.prop]\"\n            :placeholder=\"field.placeholder || '请选择' + field.label\"\n            style=\"width: 100%\"\n          >\n            <el-option \n              v-for=\"option in field.options\" \n              :key=\"option.value\" \n              :label=\"option.label\" \n              :value=\"option.value\"\n            />\n          </el-select>\n          \n          <el-switch\n            v-else-if=\"field.type === 'boolean'\"\n            v-model=\"form[field.prop]\"\n          />\n          \n          <el-date-picker\n            v-else-if=\"field.type === 'datetime'\"\n            v-model=\"form[field.prop]\"\n            type=\"datetime\"\n            style=\"width: 100%\"\n            :placeholder=\"field.placeholder || '选择日期时间'\"\n          />\n        </el-form-item>\n      </el-form>\n      \n      <template #footer>\n        <div class=\"dialog-footer\">\n          <el-button @click=\"dialogVisible = false\">取消</el-button>\n          <el-button type=\"primary\" @click=\"submitForm\">确定</el-button>\n        </div>\n      </template>\n    </el-dialog>\n\n    <!-- 删除确认对话框 -->\n    <el-dialog\n      v-model=\"deleteDialogVisible\"\n      title=\"确认删除\"\n      width=\"400px\"\n    >\n      <p>确定要删除这条记录吗？此操作不可撤销。</p>\n      <template #footer>\n        <div class=\"dialog-footer\">\n          <el-button @click=\"deleteDialogVisible = false\">取消</el-button>\n          <el-button type=\"danger\" @click=\"confirmDelete\">确认删除</el-button>\n        </div>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted, watch } from 'vue';\nimport { ElMessage, ElMessageBox } from 'element-plus';\nimport { \n  Edit, Delete, Search, Plus, Refresh\n} from '@element-plus/icons-vue';\nimport axios from 'axios';\n\nconst props = defineProps({\n  // 表名\n  tableName: {\n    type: String,\n    required: true\n  },\n  // 表显示标题\n  title: {\n    type: String,\n    required: true\n  },\n  // 表列定义\n  columns: {\n    type: Array,\n    required: true\n  },\n  // 表单字段定义\n  formFields: {\n    type: Array,\n    required: true\n  },\n  // 过滤选项\n  filterOptions: {\n    type: Array,\n    default: () => []\n  },\n  // 自定义API前缀，默认使用通用的数据库API\n  apiPrefix: {\n    type: String,\n    default: '/api/admin/db'\n  }\n});\n\nconst emit = defineEmits(['updated', 'added', 'deleted']);\n\n// 表格数据状态\nconst tableData = ref([]);\nconst loading = ref(false);\nconst total = ref(0);\nconst currentPage = ref(1);\nconst pageSize = ref(20);\nconst searchQuery = ref('');\nconst filterValue = ref('');\nconst sortField = ref('');\nconst sortDirection = ref('');\n\n// 对话框状态\nconst dialogVisible = ref(false);\nconst deleteDialogVisible = ref(false);\nconst isEdit = ref(false);\nconst form = ref({});\nconst formRef = ref(null);\nconst recordToDelete = ref(null);\n\n// 初始加载数据\nonMounted(() => {\n  loadData();\n});\n\n// 监听分页和筛选变化\nwatch([currentPage, pageSize, searchQuery, filterValue], () => {\n  loadData();\n});\n\n// 加载表格数据\nconst loadData = async () => {\n  loading.value = true;\n  try {\n    // 构建过滤条件\n    let filter = {};\n    if (searchQuery.value) {\n      // 在每个可搜索列中查找匹配\n      const searchableColumns = props.columns.filter(col => col.searchable).map(col => col.prop);\n      if (searchableColumns.length > 0) {\n        searchableColumns.forEach(col => {\n          filter[col] = searchQuery.value;\n        });\n      }\n    }\n    \n    if (filterValue.value) {\n      const [key, value] = filterValue.value.split(':');\n      filter[key] = value;\n    }\n    \n    // 构建排序\n    let order = {};\n    if (sortField.value) {\n      order = {\n        field: sortField.value,\n        direction: sortDirection.value\n      };\n    }\n    \n    // 调用API获取数据\n    const url = `${props.apiPrefix}/table/${props.tableName}/data`;\n    const response = await axios.get(url, {\n      params: {\n        page: currentPage.value,\n        limit: pageSize.value,\n        filter: Object.keys(filter).length > 0 ? JSON.stringify(filter) : undefined,\n        order: Object.keys(order).length > 0 ? JSON.stringify(order) : undefined\n      }\n    });\n    \n    if (response.data.success) {\n      tableData.value = response.data.data.rows;\n      total.value = response.data.data.pagination.total;\n    } else {\n      ElMessage.error('加载数据失败');\n    }\n  } catch (error) {\n    console.error('加载数据失败:', error);\n    ElMessage.error('加载数据失败: ' + error.message);\n  } finally {\n    loading.value = false;\n  }\n};\n\n// 处理分页和过滤事件\nconst handleSizeChange = (size) => {\n  pageSize.value = size;\n  currentPage.value = 1;\n};\n\nconst handleCurrentChange = (page) => {\n  currentPage.value = page;\n};\n\nconst handleSearch = () => {\n  currentPage.value = 1;\n  loadData();\n};\n\nconst handleFilter = () => {\n  currentPage.value = 1;\n  loadData();\n};\n\nconst handleSortChange = ({ prop, order }) => {\n  sortField.value = prop;\n  sortDirection.value = order === 'ascending' ? 'asc' : 'desc';\n  loadData();\n};\n\n// 刷新数据\nconst refreshData = () => {\n  loadData();\n};\n\n// 格式化日期时间\nconst formatDateTime = (dateStr) => {\n  if (!dateStr) return '';\n  const date = new Date(dateStr);\n  return date.toLocaleString('zh-CN');\n};\n\n// 添加和编辑记录\nconst handleAdd = () => {\n  isEdit.value = false;\n  form.value = {};\n  dialogVisible.value = true;\n};\n\nconst handleEdit = (row) => {\n  isEdit.value = true;\n  form.value = { ...row };\n  dialogVisible.value = true;\n};\n\nconst submitForm = async () => {\n  try {\n    if (formRef.value) {\n      await formRef.value.validate();\n    }\n    \n    if (isEdit.value) {\n      // 更新记录\n      const url = `${props.apiPrefix}/table/${props.tableName}/record/${form.value.id}`;\n      const response = await axios.put(url, form.value);\n      \n      if (response.data.success) {\n        ElMessage.success('记录更新成功');\n        dialogVisible.value = false;\n        loadData();\n        emit('updated', form.value);\n      } else {\n        ElMessage.error('更新失败: ' + response.data.message);\n      }\n    } else {\n      // 添加记录\n      const url = `${props.apiPrefix}/table/${props.tableName}/record`;\n      const response = await axios.post(url, form.value);\n      \n      if (response.data.success) {\n        ElMessage.success('记录添加成功');\n        dialogVisible.value = false;\n        loadData();\n        emit('added', response.data.data);\n      } else {\n        ElMessage.error('添加失败: ' + response.data.message);\n      }\n    }\n  } catch (error) {\n    console.error(isEdit.value ? '更新记录失败:' : '添加记录失败:', error);\n    ElMessage.error((isEdit.value ? '更新' : '添加') + '失败: ' + error.message);\n  }\n};\n\n// 删除记录\nconst handleDelete = (row) => {\n  recordToDelete.value = row;\n  deleteDialogVisible.value = true;\n};\n\nconst confirmDelete = async () => {\n  if (!recordToDelete.value || !recordToDelete.value.id) {\n    ElMessage.error('删除记录ID无效');\n    return;\n  }\n  \n  try {\n    const url = `${props.apiPrefix}/table/${props.tableName}/record/${recordToDelete.value.id}`;\n    const response = await axios.delete(url);\n    \n    if (response.data.success) {\n      ElMessage.success('记录删除成功');\n      deleteDialogVisible.value = false;\n      loadData();\n      emit('deleted', recordToDelete.value);\n    } else {\n      ElMessage.error('删除失败: ' + response.data.message);\n    }\n  } catch (error) {\n    console.error('删除记录失败:', error);\n    ElMessage.error('删除失败: ' + error.message);\n  }\n};\n</script> "],"names":[],"mappings":"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"}