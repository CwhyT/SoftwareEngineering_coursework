{"version":3,"file":"DatabaseManager-40f2cf10.js","sources":["../../src/views/admin/DatabaseManager.vue"],"sourcesContent":["<template>\n  <div class=\"p-6\">\n    <div class=\"mb-6\">\n      <h1 class=\"text-2xl font-bold mb-2\">数据库管理</h1>\n      <p class=\"text-gray-600\">管理和查看系统数据库中的所有表</p>\n\n      <div v-if=\"loading\" class=\"text-center py-12\">\n        <el-skeleton style=\"width: 100%\" :rows=\"10\" animated />\n      </div>\n\n      <el-alert\n        v-if=\"dbError\"\n        title=\"无法连接到数据库\"\n        type=\"error\"\n        description=\"请检查数据库配置和连接状态，或联系管理员。\"\n        show-icon\n        :closable=\"false\"\n        class=\"mb-4\"\n      />\n\n      <div v-if=\"!loading && !dbError\" class=\"mb-6\">\n        <div class=\"bg-white rounded-lg shadow-md overflow-hidden\">\n          <div class=\"bg-blue-50 p-4 border-b\">\n            <div class=\"flex justify-between items-center\">\n              <div>\n                <h2 class=\"text-lg font-semibold\">数据库信息</h2>\n                <p class=\"text-sm text-gray-600\">SQLite 文件数据库</p>\n              </div>\n              <div class=\"flex space-x-2\">\n                <el-button type=\"primary\" @click=\"refreshDbInfo\">\n                  <el-icon><Refresh /></el-icon> 刷新\n                </el-button>\n                <el-button type=\"success\" @click=\"backupDatabase\">\n                  <el-icon><Download /></el-icon> 备份数据库\n                </el-button>\n                <el-button type=\"warning\" @click=\"testDbConnection\">\n                  <el-icon><Connection /></el-icon> 测试连接\n                </el-button>\n              </div>\n            </div>\n          </div>\n          \n          <div class=\"p-4\">\n            <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              <div class=\"bg-gray-50 p-4 rounded-lg\">\n                <div class=\"text-sm text-gray-500\">数据库类型</div>\n                <div class=\"font-medium\">{{ dbInfo.type || 'SQLite' }}</div>\n              </div>\n              \n              <div class=\"bg-gray-50 p-4 rounded-lg\">\n                <div class=\"text-sm text-gray-500\">数据库文件路径</div>\n                <div class=\"font-medium truncate\">{{ dbInfo.path || 'backend/data/scooter_rental.db' }}</div>\n              </div>\n              \n              <div class=\"bg-gray-50 p-4 rounded-lg\">\n                <div class=\"text-sm text-gray-500\">表数量</div>\n                <div class=\"font-medium\">{{ dbInfo.tables?.length || 0 }} 个表</div>\n              </div>\n              \n              <div class=\"bg-gray-50 p-4 rounded-lg\">\n                <div class=\"text-sm text-gray-500\">数据库文件大小</div>\n                <div class=\"font-medium\">{{ dbInfo.size ? formatFileSize(dbInfo.size) : '未知' }}</div>\n              </div>\n\n              <div class=\"bg-gray-50 p-4 rounded-lg\">\n                <div class=\"text-sm text-gray-500\">连接状态</div>\n                <div class=\"font-medium\">\n                  <el-tag type=\"success\" size=\"small\" effect=\"dark\">已连接</el-tag>\n                </div>\n              </div>\n\n              <div class=\"bg-gray-50 p-4 rounded-lg\">\n                <div class=\"text-sm text-gray-500\">上次刷新时间</div>\n                <div class=\"font-medium\">{{ formatDateTime(lastRefreshTime) }}</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- 错误状态下显示重试按钮 -->\n      <div v-if=\"!loading && dbError\" class=\"bg-white rounded-lg shadow-md p-6 mb-6\">\n        <div class=\"text-center\">\n          <h3 class=\"text-lg font-semibold text-red-600 mb-2\">数据库连接失败</h3>\n          <p class=\"text-gray-600 mb-4\">无法连接到数据库。可能的原因：</p>\n          <ul class=\"text-left text-gray-600 max-w-lg mx-auto mb-4\">\n            <li class=\"mb-1\">• 后端服务未启动或API地址配置错误</li>\n            <li class=\"mb-1\">• 数据库文件路径错误或权限不足</li>\n            <li class=\"mb-1\">• 数据库文件已损坏或被锁定</li>\n            <li class=\"mb-1\">• 网络连接问题</li>\n          </ul>\n          <div class=\"flex justify-center gap-4\">\n            <el-button type=\"primary\" @click=\"loadDatabaseInfo\" :loading=\"loading\">\n              <el-icon class=\"mr-1\"><Refresh /></el-icon> 重试连接\n            </el-button>\n            <el-button type=\"info\" @click=\"checkDbFileExists\">\n              检查数据库文件\n            </el-button>\n            <el-button type=\"success\" @click=\"autoReconnect\">\n              <el-icon class=\"mr-1\"><Connection /></el-icon> 自动修复连接\n            </el-button>\n          </div>\n        </div>\n      </div>\n\n      <!-- 数据表总览 -->\n      <div v-if=\"!loading && !dbError\" class=\"bg-white rounded-lg shadow-md overflow-hidden mb-6\">\n        <div class=\"bg-blue-50 p-4 border-b\">\n          <h2 class=\"text-lg font-semibold\">数据表总览</h2>\n        </div>\n        \n        <div class=\"p-4\">\n          <el-input\n            v-model=\"searchQuery\"\n            placeholder=\"搜索表名...\"\n            class=\"mb-4 w-full md:w-64\"\n            clearable\n          >\n            <template #prefix>\n              <el-icon><Search /></el-icon>\n            </template>\n          </el-input>\n          \n          <el-table\n            :data=\"filteredTables\"\n            style=\"width: 100%\"\n            @row-click=\"handleTableClick\"\n          >\n            <el-table-column prop=\"name\" label=\"表名\" width=\"200\" />\n            <el-table-column label=\"记录数\" width=\"120\">\n              <template #default=\"scope\">\n                <div v-if=\"tablesData[scope.row.name]\">\n                  {{ tablesData[scope.row.name].total || 0 }} 条记录\n                </div>\n                <el-button v-else type=\"primary\" link @click.stop=\"loadTableData(scope.row.name)\">\n                  加载数据\n                </el-button>\n              </template>\n            </el-table-column>\n            <el-table-column label=\"操作\">\n              <template #default=\"scope\">\n                <div class=\"flex space-x-2\">\n                  <el-button type=\"primary\" size=\"small\" @click.stop=\"viewTableData(scope.row.name)\">\n                    查看数据\n                  </el-button>\n                  <el-button type=\"info\" size=\"small\" @click.stop=\"viewTableSchema(scope.row.name)\">\n                    表结构\n                  </el-button>\n                  <el-button type=\"danger\" size=\"small\" @click.stop=\"clearTable(scope.row.name)\">\n                    清空表\n                  </el-button>\n                </div>\n              </template>\n            </el-table-column>\n          </el-table>\n        </div>\n      </div>\n\n      <!-- SQL查询工具 -->\n      <div v-if=\"!loading && !dbError\" class=\"bg-white rounded-lg shadow-md overflow-hidden mb-6\">\n        <div class=\"bg-blue-50 p-4 border-b\">\n          <h2 class=\"text-lg font-semibold\">SQL查询工具</h2>\n        </div>\n        \n        <div class=\"p-4\">\n          <el-input\n            v-model=\"sqlQuery\"\n            type=\"textarea\"\n            :rows=\"4\"\n            placeholder=\"输入SQL查询语句...\"\n            class=\"mb-4\"\n          />\n          \n          <div class=\"flex justify-between mb-4\">\n            <div>\n              <el-button type=\"primary\" @click=\"executeQuery\" :loading=\"queryLoading\">\n                执行\n              </el-button>\n              <el-button @click=\"sqlQuery = ''\">\n                清空\n              </el-button>\n            </div>\n            \n            <div>\n              <el-select v-model=\"queryTemplate\" placeholder=\"选择模板\" @change=\"applyTemplate\">\n                <el-option label=\"查询用户表\" value=\"SELECT * FROM users LIMIT 10\" />\n                <el-option label=\"查询订单表\" value=\"SELECT * FROM orders LIMIT 10\" />\n                <el-option label=\"查询车辆表\" value=\"SELECT * FROM scooters LIMIT 10\" />\n                <el-option label=\"统计活跃用户\" value=\"SELECT role, COUNT(*) as count FROM users WHERE status = 'active' GROUP BY role\" />\n                <el-option label=\"统计订单金额\" value=\"SELECT DATE(created_at) as date, SUM(amount) as total FROM orders GROUP BY DATE(created_at) ORDER BY date DESC LIMIT 7\" />\n              </el-select>\n            </div>\n          </div>\n          \n          <div v-if=\"queryResult\" class=\"border rounded-lg overflow-hidden\">\n            <div class=\"bg-gray-50 p-2 border-b text-sm\">\n              查询结果 ({{ Array.isArray(queryResult) ? queryResult.length : 1 }} 行)\n            </div>\n            \n            <div class=\"p-2 overflow-x-auto\">\n              <el-table\n                v-if=\"Array.isArray(queryResult) && queryResult.length > 0\"\n                :data=\"queryResult\"\n                border\n                style=\"width: 100%\"\n              >\n                <el-table-column\n                  v-for=\"column in Object.keys(queryResult[0])\"\n                  :key=\"column\"\n                  :prop=\"column\"\n                  :label=\"column\"\n                />\n              </el-table>\n              \n              <div v-else-if=\"queryResult.affectedRows !== undefined\" class=\"p-4\">\n                <el-alert\n                  :title=\"`操作成功: 影响了 ${queryResult.affectedRows} 行`\"\n                  type=\"success\"\n                  show-icon\n                />\n              </div>\n              \n              <div v-else-if=\"Array.isArray(queryResult) && queryResult.length === 0\" class=\"p-4\">\n                <el-alert\n                  title=\"查询成功，但没有返回数据\"\n                  type=\"info\"\n                  show-icon\n                />\n              </div>\n            </div>\n          </div>\n          \n          <div v-if=\"queryError\" class=\"mt-4\">\n            <el-alert\n              :title=\"queryError\"\n              type=\"error\"\n              show-icon\n              :closable=\"true\"\n              @close=\"queryError = ''\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- 表数据对话框 -->\n    <el-dialog\n      v-model=\"tableDataDialog.visible\"\n      :title=\"`${tableDataDialog.tableName} - 数据`\"\n      width=\"90%\"\n    >\n      <TableManager \n        :tableName=\"tableDataDialog.tableName\"\n        :title=\"tableDataDialog.tableName\"\n        :columns=\"tableDataDialog.columns\"\n        :formFields=\"tableDataDialog.formFields\"\n        apiPrefix=\"/api/admin/db\"\n      />\n    </el-dialog>\n\n    <!-- 表结构对话框 -->\n    <el-dialog\n      v-model=\"tableSchemaDialog.visible\"\n      :title=\"`${tableSchemaDialog.tableName} - 表结构`\"\n      width=\"80%\"\n    >\n      <el-table\n        :data=\"tableSchemaDialog.columns\"\n        style=\"width: 100%\"\n        border\n      >\n        <el-table-column prop=\"name\" label=\"列名\" />\n        <el-table-column prop=\"type\" label=\"数据类型\" />\n        <el-table-column prop=\"notnull\" label=\"不允许为空\">\n          <template #default=\"scope\">\n            {{ scope.row.notnull === 1 ? '是' : '否' }}\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"dflt_value\" label=\"默认值\" />\n        <el-table-column prop=\"pk\" label=\"主键\">\n          <template #default=\"scope\">\n            {{ scope.row.pk === 1 ? '是' : '否' }}\n          </template>\n        </el-table-column>\n      </el-table>\n    </el-dialog>\n  </div>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted } from 'vue';\nimport { ElMessage, ElMessageBox } from 'element-plus';\nimport { Search, Refresh, Download, Connection } from '@element-plus/icons-vue';\nimport TableManager from '@/components/admin/TableManager.vue';\nimport axios from 'axios';\n\n// 数据库信息\nconst loading = ref(true);\nconst dbError = ref(false);\nconst dbInfo = ref({});\nconst searchQuery = ref('');\nconst lastRefreshTime = ref(null);\n\n// 表数据\nconst tables = ref([]);\nconst tablesData = ref({});\n\n// SQL查询\nconst sqlQuery = ref('');\nconst queryTemplate = ref('');\nconst queryLoading = ref(false);\nconst queryResult = ref(null);\nconst queryError = ref('');\n\n// 对话框状态\nconst tableDataDialog = ref({\n  visible: false,\n  tableName: '',\n  columns: [],\n  formFields: []\n});\n\nconst tableSchemaDialog = ref({\n  visible: false,\n  tableName: '',\n  columns: []\n});\n\n// 计算属性\nconst filteredTables = computed(() => {\n  if (!searchQuery.value) return tables.value;\n  \n  const query = searchQuery.value.toLowerCase();\n  return tables.value.filter(table => \n    table.name.toLowerCase().includes(query)\n  );\n});\n\n// 初始化\nonMounted(async () => {\n  await loadDatabaseInfo();\n  \n  // 添加定时健康检查，确保连接稳定\n  setInterval(async () => {\n    try {\n      // 仅在出现错误时进行健康检查\n      if (dbError.value) {\n        console.log('执行数据库连接健康检查...');\n        const pingResponse = await axios.get('/api/admin/db/ping', { timeout: 2000 });\n        if (pingResponse.data.success) {\n          console.log('API服务正常，尝试重新加载数据...');\n          await loadDatabaseInfo();\n        }\n      }\n    } catch (error) {\n      console.warn('健康检查失败:', error.message);\n    }\n  }, 30000); // 每30秒检查一次\n});\n\n// 加载数据库信息\nconst loadDatabaseInfo = async () => {\n  loading.value = true;\n  dbError.value = false;\n  \n  try {\n    // 添加最多尝试3次的重试逻辑\n    let attempts = 0;\n    const maxAttempts = 3;\n    let success = false;\n    \n    while (attempts < maxAttempts && !success) {\n      attempts++;\n      try {\n        const response = await axios.get('/api/admin/db/info', { timeout: 5000 });\n        if (response.data.success) {\n          dbInfo.value = response.data.data;\n          tables.value = dbInfo.value.tables.map(name => ({ name }));\n          lastRefreshTime.value = new Date();\n          success = true;\n        } else {\n          console.warn(`尝试 ${attempts}/${maxAttempts} 失败: ${response.data.message}`);\n          if (attempts < maxAttempts) await new Promise(r => setTimeout(r, 1000)); // 等待1秒后重试\n        }\n      } catch (err) {\n        console.warn(`尝试 ${attempts}/${maxAttempts} 出错:`, err.message);\n        if (attempts < maxAttempts) await new Promise(r => setTimeout(r, 1000)); // 等待1秒后重试\n      }\n    }\n    \n    if (!success) {\n      dbError.value = true;\n      ElMessage.error('获取数据库信息失败，请检查API服务是否正常运行');\n      // 尝试检查连接问题\n      checkDbConnection();\n    }\n  } catch (error) {\n    console.error('获取数据库信息错误:', error);\n    dbError.value = true;\n    ElMessage.error('连接数据库失败: ' + error.message);\n    // 尝试检查连接问题\n    checkDbConnection();\n  } finally {\n    loading.value = false;\n  }\n};\n\n// 检查数据库连接问题\nconst checkDbConnection = async () => {\n  try {\n    // 发送简单的心跳请求来检查API是否可用\n    const pingResponse = await axios.get('/api/admin/db/ping', { timeout: 3000 });\n    if (pingResponse.data.success) {\n      ElMessage.warning('API服务可用，但无法连接到数据库。请检查数据库配置或数据库文件是否存在。');\n    }\n  } catch (error) {\n    // API都无法连接\n    console.error('API连接测试失败:', error);\n    ElMessage.error('无法连接到API服务。请确认后端服务是否正常运行。');\n  }\n};\n\n// 检查数据库文件是否存在\nconst checkDbFileExists = async () => {\n  try {\n    const response = await axios.get('/api/admin/db/file-check');\n    if (response.data.success) {\n      if (response.data.data.exists) {\n        ElMessage.success(`数据库文件存在于路径: ${response.data.data.path}`);\n      } else {\n        ElMessage.error(`数据库文件不存在! 预期路径: ${response.data.data.path}`);\n      }\n    } else {\n      ElMessage.error('检查数据库文件失败: ' + response.data.message);\n    }\n  } catch (error) {\n    console.error('检查数据库文件错误:', error);\n    ElMessage.error('检查失败，无法连接到后端服务');\n  }\n};\n\n// 刷新数据库信息\nconst refreshDbInfo = async () => {\n  await loadDatabaseInfo();\n  ElMessage.success('数据库信息已刷新');\n};\n\n// 备份数据库\nconst backupDatabase = async () => {\n  try {\n    ElMessage.info('正在备份数据库...');\n    const response = await axios.post('/api/admin/db/backup', {}, { timeout: 10000 });\n    \n    if (response.data.success) {\n      ElMessage.success('数据库备份成功');\n      ElMessage({\n        type: 'success',\n        message: `备份已保存到: ${response.data.data.backupPath}`,\n        duration: 5000\n      });\n    } else {\n      ElMessage.error('数据库备份失败: ' + response.data.message);\n    }\n  } catch (error) {\n    console.error('备份数据库错误:', error);\n    ElMessage.error('备份数据库失败: ' + error.message);\n  }\n};\n\n// 加载表数据\nconst loadTableData = async (tableName) => {\n  try {\n    const response = await axios.get(`/api/admin/db/table/${tableName}/data`, {\n      params: { page: 1, limit: 1 }\n    });\n    \n    if (response.data.success) {\n      tablesData.value[tableName] = response.data.data.pagination;\n    } else {\n      ElMessage.error('加载表数据失败: ' + response.data.message);\n    }\n  } catch (error) {\n    console.error(`加载表 ${tableName} 数据错误:`, error);\n    ElMessage.error(`加载表 ${tableName} 数据失败: ` + error.message);\n  }\n};\n\n// 查看表数据\nconst viewTableData = async (tableName) => {\n  try {\n    // 先获取表结构信息\n    const response = await axios.get(`/api/admin/db/table/${tableName}/schema`);\n    \n    if (response.data.success) {\n      const columns = response.data.data.columns;\n      \n      // 构建列配置\n      const tableColumns = columns.map(col => ({\n        prop: col.name,\n        label: col.name,\n        sortable: true,\n        searchable: col.type.includes('TEXT') || col.type.includes('VARCHAR'),\n        type: col.type.includes('DATETIME') ? 'datetime' : undefined\n      }));\n      \n      // 构建表单字段\n      const formFields = columns.map(col => {\n        const field = {\n          prop: col.name,\n          label: col.name,\n          type: getFieldType(col.type)\n        };\n        \n        // 添加必填规则\n        if (col.notnull === 1 && col.pk !== 1) {\n          field.rules = [{ required: true, message: `请输入${col.name}`, trigger: 'blur' }];\n        }\n        \n        return field;\n      });\n      \n      // 打开对话框\n      tableDataDialog.value = {\n        visible: true,\n        tableName,\n        columns: tableColumns,\n        formFields\n      };\n    } else {\n      ElMessage.error('获取表结构失败: ' + response.data.message);\n    }\n  } catch (error) {\n    console.error(`查看表 ${tableName} 数据错误:`, error);\n    ElMessage.error(`查看表 ${tableName} 数据失败: ` + error.message);\n  }\n};\n\n// 查看表结构\nconst viewTableSchema = async (tableName) => {\n  try {\n    const response = await axios.get(`/api/admin/db/table/${tableName}/schema`);\n    \n    if (response.data.success) {\n      tableSchemaDialog.value = {\n        visible: true,\n        tableName,\n        columns: response.data.data.columns\n      };\n    } else {\n      ElMessage.error('获取表结构失败: ' + response.data.message);\n    }\n  } catch (error) {\n    console.error(`查看表 ${tableName} 结构错误:`, error);\n    ElMessage.error(`查看表 ${tableName} 结构失败: ` + error.message);\n  }\n};\n\n// 清空表\nconst clearTable = async (tableName) => {\n  try {\n    await ElMessageBox.confirm(\n      `确定要清空 ${tableName} 表中的所有数据吗？此操作不可恢复。`,\n      '警告',\n      {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }\n    );\n    \n    const response = await axios.post('/api/admin/db/query', {\n      sql: `DELETE FROM ${tableName}`\n    });\n    \n    if (response.data.success) {\n      ElMessage.success(`已清空 ${tableName} 表数据`);\n      loadTableData(tableName);\n    } else {\n      ElMessage.error('清空表失败: ' + response.data.message);\n    }\n  } catch (error) {\n    if (error !== 'cancel') {\n      console.error(`清空表 ${tableName} 错误:`, error);\n      ElMessage.error(`清空表 ${tableName} 失败: ` + error.message);\n    }\n  }\n};\n\n// 执行SQL查询\nconst executeQuery = async () => {\n  if (!sqlQuery.value.trim()) {\n    ElMessage.warning('请输入SQL查询语句');\n    return;\n  }\n  \n  queryLoading.value = true;\n  queryResult.value = null;\n  queryError.value = '';\n  \n  try {\n    // 添加超时设置和重试机制\n    let attempts = 0;\n    const maxAttempts = 2;\n    let success = false;\n    \n    while (attempts < maxAttempts && !success) {\n      attempts++;\n      try {\n        const response = await axios.post('/api/admin/db/query', {\n          sql: sqlQuery.value\n        }, { timeout: 10000 });\n        \n        if (response.data.success) {\n          queryResult.value = response.data.data.result;\n          ElMessage.success('查询执行成功');\n          success = true;\n        } else {\n          queryError.value = response.data.message;\n          if (attempts < maxAttempts) {\n            console.log(`SQL执行失败，正在重试(${attempts}/${maxAttempts})...`);\n            await new Promise(r => setTimeout(r, 500));\n          }\n        }\n      } catch (err) {\n        console.error(`执行查询尝试 ${attempts}/${maxAttempts} 出错:`, err);\n        if (attempts < maxAttempts) await new Promise(r => setTimeout(r, 500));\n      }\n    }\n    \n    if (!success) {\n      ElMessage.error('执行SQL查询失败，请重试或检查SQL语法');\n    }\n  } catch (error) {\n    console.error('执行SQL查询错误:', error);\n    queryError.value = error.message;\n  } finally {\n    queryLoading.value = false;\n  }\n};\n\n// 应用SQL模板\nconst applyTemplate = () => {\n  sqlQuery.value = queryTemplate.value;\n  queryTemplate.value = '';\n};\n\n// 点击表行\nconst handleTableClick = (row) => {\n  viewTableData(row.name);\n};\n\n// 工具函数 - 获取表单字段类型\nconst getFieldType = (dbType) => {\n  const type = dbType.toUpperCase();\n  if (type.includes('INT')) return 'number';\n  if (type.includes('FLOAT') || type.includes('DOUBLE') || type.includes('DECIMAL')) return 'number';\n  if (type.includes('DATETIME') || type.includes('TIMESTAMP')) return 'datetime';\n  if (type.includes('BOOLEAN')) return 'boolean';\n  return 'text';\n};\n\n// 测试数据库连接\nconst testDbConnection = async () => {\n  try {\n    ElMessage.info('正在测试数据库连接...');\n    const response = await axios.get('/api/admin/db/test-connection', { timeout: 5000 });\n    if (response.data.success) {\n      ElMessage.success('数据库连接测试成功!');\n      // 自动刷新数据库信息\n      await loadDatabaseInfo();\n    } else {\n      ElMessage.error('数据库连接测试失败: ' + response.data.message);\n    }\n  } catch (error) {\n    console.error('测试数据库连接错误:', error);\n    ElMessage.error('测试连接失败: ' + error.message);\n  }\n};\n\n// 格式化文件大小\nconst formatFileSize = (bytes) => {\n  if (bytes === 0) return '0 Bytes';\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n};\n\n// 格式化日期时间\nconst formatDateTime = (dateVal) => {\n  if (!dateVal) return '未知';\n  const date = new Date(dateVal);\n  return date.toLocaleString('zh-CN');\n};\n\n// 添加自动重连功能\nconst autoReconnect = async () => {\n  ElMessage.info('正在尝试重新连接数据库...');\n  try {\n    // 先测试API服务是否可用\n    const pingResponse = await axios.get('/api/admin/db/ping', { timeout: 3000 });\n    if (pingResponse.data.success) {\n      // API服务正常，尝试重新加载数据\n      await loadDatabaseInfo();\n      ElMessage.success('数据库连接已恢复');\n    } else {\n      ElMessage.error('无法连接到数据库服务');\n    }\n  } catch (error) {\n    console.error('重新连接失败:', error);\n    ElMessage.error('重新连接失败: ' + error.message);\n  }\n};\n</script> \n "],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAySA,UAAM,UAAU,IAAI,IAAI;AACxB,UAAM,UAAU,IAAI,KAAK;AACzB,UAAM,SAAS,IAAI,CAAA,CAAE;AACrB,UAAM,cAAc,IAAI,EAAE;AAC1B,UAAM,kBAAkB,IAAI,IAAI;AAGhC,UAAM,SAAS,IAAI,CAAA,CAAE;AACrB,UAAM,aAAa,IAAI,CAAA,CAAE;AAGzB,UAAM,WAAW,IAAI,EAAE;AACvB,UAAM,gBAAgB,IAAI,EAAE;AAC5B,UAAM,eAAe,IAAI,KAAK;AAC9B,UAAM,cAAc,IAAI,IAAI;AAC5B,UAAM,aAAa,IAAI,EAAE;AAGzB,UAAM,kBAAkB,IAAI;AAAA,MAC1B,SAAS;AAAA,MACT,WAAW;AAAA,MACX,SAAS,CAAE;AAAA,MACX,YAAY,CAAC;AAAA,IACf,CAAC;AAED,UAAM,oBAAoB,IAAI;AAAA,MAC5B,SAAS;AAAA,MACT,WAAW;AAAA,MACX,SAAS,CAAC;AAAA,IACZ,CAAC;AAGD,UAAM,iBAAiB,SAAS,MAAM;AACpC,UAAI,CAAC,YAAY;AAAO,eAAO,OAAO;AAEtC,YAAM,QAAQ,YAAY,MAAM,YAAW;AAC3C,aAAO,OAAO,MAAM;AAAA,QAAO,WACzB,MAAM,KAAK,cAAc,SAAS,KAAK;AAAA,MAC3C;AAAA,IACA,CAAC;AAGD,cAAU,MAAY;AACpB,YAAM,iBAAgB;AAGtB,kBAAY,MAAY;AACtB,YAAI;AAEF,cAAI,QAAQ,OAAO;AACjB,oBAAQ,IAAI,gBAAgB;AAC5B,kBAAM,eAAe,MAAM,MAAM,IAAI,sBAAsB,EAAE,SAAS,IAAI,CAAE;AAC5E,gBAAI,aAAa,KAAK,SAAS;AAC7B,sBAAQ,IAAI,qBAAqB;AACjC,oBAAM,iBAAgB;AAAA,YACxB;AAAA,UACF;AAAA,QACD,SAAQ,OAAO;AACd,kBAAQ,KAAK,WAAW,MAAM,OAAO;AAAA,QACvC;AAAA,MACD,IAAE,GAAK;AAAA,IACV,EAAC;AAGD,UAAM,mBAAmB,MAAY;AACnC,cAAQ,QAAQ;AAChB,cAAQ,QAAQ;AAEhB,UAAI;AAEF,YAAI,WAAW;AACf,cAAM,cAAc;AACpB,YAAI,UAAU;AAEd,eAAO,WAAW,eAAe,CAAC,SAAS;AACzC;AACA,cAAI;AACF,kBAAM,WAAW,MAAM,MAAM,IAAI,sBAAsB,EAAE,SAAS,IAAI,CAAE;AACxE,gBAAI,SAAS,KAAK,SAAS;AACzB,qBAAO,QAAQ,SAAS,KAAK;AAC7B,qBAAO,QAAQ,OAAO,MAAM,OAAO,IAAI,WAAS,EAAE,KAAM,EAAC;AACzD,8BAAgB,QAAQ,oBAAI;AAC5B,wBAAU;AAAA,YACpB,OAAe;AACL,sBAAQ,KAAK,MAAM,QAAQ,IAAI,WAAW,QAAQ,SAAS,KAAK,OAAO,EAAE;AACzE,kBAAI,WAAW;AAAa,sBAAM,IAAI,QAAQ,OAAK,WAAW,GAAG,GAAI,CAAC;AAAA,YACxE;AAAA,UACD,SAAQ,KAAK;AACZ,oBAAQ,KAAK,MAAM,QAAQ,IAAI,WAAW,QAAQ,IAAI,OAAO;AAC7D,gBAAI,WAAW;AAAa,oBAAM,IAAI,QAAQ,OAAK,WAAW,GAAG,GAAI,CAAC;AAAA,UACxE;AAAA,QACF;AAEA,YAAI,CAAC,SAAS;AACZ,kBAAQ,QAAQ;AAChB,oBAAU,MAAM,0BAA0B;AAE1C;QACF;AAAA,MACD,SAAQ,OAAO;AACd,gBAAQ,MAAM,cAAc,KAAK;AACjC,gBAAQ,QAAQ;AAChB,kBAAU,MAAM,cAAc,MAAM,OAAO;AAE3C;MACJ,UAAY;AACR,gBAAQ,QAAQ;AAAA,MAClB;AAAA,IACF;AAGA,UAAM,oBAAoB,MAAY;AACpC,UAAI;AAEF,cAAM,eAAe,MAAM,MAAM,IAAI,sBAAsB,EAAE,SAAS,IAAI,CAAE;AAC5E,YAAI,aAAa,KAAK,SAAS;AAC7B,oBAAU,QAAQ,uCAAuC;AAAA,QAC3D;AAAA,MACD,SAAQ,OAAO;AAEd,gBAAQ,MAAM,cAAc,KAAK;AACjC,kBAAU,MAAM,2BAA2B;AAAA,MAC7C;AAAA,IACF;AAGA,UAAM,oBAAoB,MAAY;AACpC,UAAI;AACF,cAAM,WAAW,MAAM,MAAM,IAAI,0BAA0B;AAC3D,YAAI,SAAS,KAAK,SAAS;AACzB,cAAI,SAAS,KAAK,KAAK,QAAQ;AAC7B,sBAAU,QAAQ,eAAe,SAAS,KAAK,KAAK,IAAI,EAAE;AAAA,UAClE,OAAa;AACL,sBAAU,MAAM,mBAAmB,SAAS,KAAK,KAAK,IAAI,EAAE;AAAA,UAC9D;AAAA,QACN,OAAW;AACL,oBAAU,MAAM,gBAAgB,SAAS,KAAK,OAAO;AAAA,QACvD;AAAA,MACD,SAAQ,OAAO;AACd,gBAAQ,MAAM,cAAc,KAAK;AACjC,kBAAU,MAAM,gBAAgB;AAAA,MAClC;AAAA,IACF;AAGA,UAAM,gBAAgB,MAAY;AAChC,YAAM,iBAAgB;AACtB,gBAAU,QAAQ,UAAU;AAAA,IAC9B;AAGA,UAAM,iBAAiB,MAAY;AACjC,UAAI;AACF,kBAAU,KAAK,YAAY;AAC3B,cAAM,WAAW,MAAM,MAAM,KAAK,wBAAwB,CAAA,GAAI,EAAE,SAAS,IAAK,CAAE;AAEhF,YAAI,SAAS,KAAK,SAAS;AACzB,oBAAU,QAAQ,SAAS;AAC3B,oBAAU;AAAA,YACR,MAAM;AAAA,YACN,SAAS,WAAW,SAAS,KAAK,KAAK,UAAU;AAAA,YACjD,UAAU;AAAA,UAClB,CAAO;AAAA,QACP,OAAW;AACL,oBAAU,MAAM,cAAc,SAAS,KAAK,OAAO;AAAA,QACrD;AAAA,MACD,SAAQ,OAAO;AACd,gBAAQ,MAAM,YAAY,KAAK;AAC/B,kBAAU,MAAM,cAAc,MAAM,OAAO;AAAA,MAC7C;AAAA,IACF;AAGA,UAAM,gBAAgB,CAAO,cAAc;AACzC,UAAI;AACF,cAAM,WAAW,MAAM,MAAM,IAAI,uBAAuB,SAAS,SAAS;AAAA,UACxE,QAAQ,EAAE,MAAM,GAAG,OAAO,EAAE;AAAA,QAClC,CAAK;AAED,YAAI,SAAS,KAAK,SAAS;AACzB,qBAAW,MAAM,SAAS,IAAI,SAAS,KAAK,KAAK;AAAA,QACvD,OAAW;AACL,oBAAU,MAAM,cAAc,SAAS,KAAK,OAAO;AAAA,QACrD;AAAA,MACD,SAAQ,OAAO;AACd,gBAAQ,MAAM,OAAO,SAAS,UAAU,KAAK;AAC7C,kBAAU,MAAM,OAAO,SAAS,YAAY,MAAM,OAAO;AAAA,MAC3D;AAAA,IACF;AAGA,UAAM,gBAAgB,CAAO,cAAc;AACzC,UAAI;AAEF,cAAM,WAAW,MAAM,MAAM,IAAI,uBAAuB,SAAS,SAAS;AAE1E,YAAI,SAAS,KAAK,SAAS;AACzB,gBAAM,UAAU,SAAS,KAAK,KAAK;AAGnC,gBAAM,eAAe,QAAQ,IAAI,UAAQ;AAAA,YACvC,MAAM,IAAI;AAAA,YACV,OAAO,IAAI;AAAA,YACX,UAAU;AAAA,YACV,YAAY,IAAI,KAAK,SAAS,MAAM,KAAK,IAAI,KAAK,SAAS,SAAS;AAAA,YACpE,MAAM,IAAI,KAAK,SAAS,UAAU,IAAI,aAAa;AAAA,UACpD,EAAC;AAGF,gBAAM,aAAa,QAAQ,IAAI,SAAO;AACpC,kBAAM,QAAQ;AAAA,cACZ,MAAM,IAAI;AAAA,cACV,OAAO,IAAI;AAAA,cACX,MAAM,aAAa,IAAI,IAAI;AAAA,YACrC;AAGQ,gBAAI,IAAI,YAAY,KAAK,IAAI,OAAO,GAAG;AACrC,oBAAM,QAAQ,CAAC,EAAE,UAAU,MAAM,SAAS,MAAM,IAAI,IAAI,IAAI,SAAS,OAAQ,CAAA;AAAA,YAC/E;AAEA,mBAAO;AAAA,UACf,CAAO;AAGD,0BAAgB,QAAQ;AAAA,YACtB,SAAS;AAAA,YACT;AAAA,YACA,SAAS;AAAA,YACT;AAAA,UACR;AAAA,QACA,OAAW;AACL,oBAAU,MAAM,cAAc,SAAS,KAAK,OAAO;AAAA,QACrD;AAAA,MACD,SAAQ,OAAO;AACd,gBAAQ,MAAM,OAAO,SAAS,UAAU,KAAK;AAC7C,kBAAU,MAAM,OAAO,SAAS,YAAY,MAAM,OAAO;AAAA,MAC3D;AAAA,IACF;AAGA,UAAM,kBAAkB,CAAO,cAAc;AAC3C,UAAI;AACF,cAAM,WAAW,MAAM,MAAM,IAAI,uBAAuB,SAAS,SAAS;AAE1E,YAAI,SAAS,KAAK,SAAS;AACzB,4BAAkB,QAAQ;AAAA,YACxB,SAAS;AAAA,YACT;AAAA,YACA,SAAS,SAAS,KAAK,KAAK;AAAA,UACpC;AAAA,QACA,OAAW;AACL,oBAAU,MAAM,cAAc,SAAS,KAAK,OAAO;AAAA,QACrD;AAAA,MACD,SAAQ,OAAO;AACd,gBAAQ,MAAM,OAAO,SAAS,UAAU,KAAK;AAC7C,kBAAU,MAAM,OAAO,SAAS,YAAY,MAAM,OAAO;AAAA,MAC3D;AAAA,IACF;AAGA,UAAM,aAAa,CAAO,cAAc;AACtC,UAAI;AACF,cAAM,aAAa;AAAA,UACjB,SAAS,SAAS;AAAA,UAClB;AAAA,UACA;AAAA,YACE,mBAAmB;AAAA,YACnB,kBAAkB;AAAA,YAClB,MAAM;AAAA,UACR;AAAA,QACN;AAEI,cAAM,WAAW,MAAM,MAAM,KAAK,uBAAuB;AAAA,UACvD,KAAK,eAAe,SAAS;AAAA,QACnC,CAAK;AAED,YAAI,SAAS,KAAK,SAAS;AACzB,oBAAU,QAAQ,OAAO,SAAS,MAAM;AACxC,wBAAc,SAAS;AAAA,QAC7B,OAAW;AACL,oBAAU,MAAM,YAAY,SAAS,KAAK,OAAO;AAAA,QACnD;AAAA,MACD,SAAQ,OAAO;AACd,YAAI,UAAU,UAAU;AACtB,kBAAQ,MAAM,OAAO,SAAS,QAAQ,KAAK;AAC3C,oBAAU,MAAM,OAAO,SAAS,UAAU,MAAM,OAAO;AAAA,QACzD;AAAA,MACF;AAAA,IACF;AAGA,UAAM,eAAe,MAAY;AAC/B,UAAI,CAAC,SAAS,MAAM,QAAQ;AAC1B,kBAAU,QAAQ,YAAY;AAC9B;AAAA,MACF;AAEA,mBAAa,QAAQ;AACrB,kBAAY,QAAQ;AACpB,iBAAW,QAAQ;AAEnB,UAAI;AAEF,YAAI,WAAW;AACf,cAAM,cAAc;AACpB,YAAI,UAAU;AAEd,eAAO,WAAW,eAAe,CAAC,SAAS;AACzC;AACA,cAAI;AACF,kBAAM,WAAW,MAAM,MAAM,KAAK,uBAAuB;AAAA,cACvD,KAAK,SAAS;AAAA,YACxB,GAAW,EAAE,SAAS,IAAK,CAAE;AAErB,gBAAI,SAAS,KAAK,SAAS;AACzB,0BAAY,QAAQ,SAAS,KAAK,KAAK;AACvC,wBAAU,QAAQ,QAAQ;AAC1B,wBAAU;AAAA,YACpB,OAAe;AACL,yBAAW,QAAQ,SAAS,KAAK;AACjC,kBAAI,WAAW,aAAa;AAC1B,wBAAQ,IAAI,gBAAgB,QAAQ,IAAI,WAAW,MAAM;AACzD,sBAAM,IAAI,QAAQ,OAAK,WAAW,GAAG,GAAG,CAAC;AAAA,cAC3C;AAAA,YACF;AAAA,UACD,SAAQ,KAAK;AACZ,oBAAQ,MAAM,UAAU,QAAQ,IAAI,WAAW,QAAQ,GAAG;AAC1D,gBAAI,WAAW;AAAa,oBAAM,IAAI,QAAQ,OAAK,WAAW,GAAG,GAAG,CAAC;AAAA,UACvE;AAAA,QACF;AAEA,YAAI,CAAC,SAAS;AACZ,oBAAU,MAAM,uBAAuB;AAAA,QACzC;AAAA,MACD,SAAQ,OAAO;AACd,gBAAQ,MAAM,cAAc,KAAK;AACjC,mBAAW,QAAQ,MAAM;AAAA,MAC7B,UAAY;AACR,qBAAa,QAAQ;AAAA,MACvB;AAAA,IACF;AAGA,UAAM,gBAAgB,MAAM;AAC1B,eAAS,QAAQ,cAAc;AAC/B,oBAAc,QAAQ;AAAA,IACxB;AAGA,UAAM,mBAAmB,CAAC,QAAQ;AAChC,oBAAc,IAAI,IAAI;AAAA,IACxB;AAGA,UAAM,eAAe,CAAC,WAAW;AAC/B,YAAM,OAAO,OAAO;AACpB,UAAI,KAAK,SAAS,KAAK;AAAG,eAAO;AACjC,UAAI,KAAK,SAAS,OAAO,KAAK,KAAK,SAAS,QAAQ,KAAK,KAAK,SAAS,SAAS;AAAG,eAAO;AAC1F,UAAI,KAAK,SAAS,UAAU,KAAK,KAAK,SAAS,WAAW;AAAG,eAAO;AACpE,UAAI,KAAK,SAAS,SAAS;AAAG,eAAO;AACrC,aAAO;AAAA,IACT;AAGA,UAAM,mBAAmB,MAAY;AACnC,UAAI;AACF,kBAAU,KAAK,cAAc;AAC7B,cAAM,WAAW,MAAM,MAAM,IAAI,iCAAiC,EAAE,SAAS,IAAI,CAAE;AACnF,YAAI,SAAS,KAAK,SAAS;AACzB,oBAAU,QAAQ,YAAY;AAE9B,gBAAM,iBAAgB;AAAA,QAC5B,OAAW;AACL,oBAAU,MAAM,gBAAgB,SAAS,KAAK,OAAO;AAAA,QACvD;AAAA,MACD,SAAQ,OAAO;AACd,gBAAQ,MAAM,cAAc,KAAK;AACjC,kBAAU,MAAM,aAAa,MAAM,OAAO;AAAA,MAC5C;AAAA,IACF;AAGA,UAAM,iBAAiB,CAAC,UAAU;AAChC,UAAI,UAAU;AAAG,eAAO;AACxB,YAAM,IAAI;AACV,YAAM,QAAQ,CAAC,SAAS,MAAM,MAAM,MAAM,IAAI;AAC9C,YAAM,IAAI,KAAK,MAAM,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,CAAC,CAAC;AAClD,aAAO,YAAY,QAAQ,KAAK,IAAI,GAAG,CAAC,GAAG,QAAQ,CAAC,CAAC,IAAI,MAAM,MAAM,CAAC;AAAA,IACxE;AAGA,UAAM,iBAAiB,CAAC,YAAY;AAClC,UAAI,CAAC;AAAS,eAAO;AACrB,YAAM,OAAO,IAAI,KAAK,OAAO;AAC7B,aAAO,KAAK,eAAe,OAAO;AAAA,IACpC;AAGA,UAAM,gBAAgB,MAAY;AAChC,gBAAU,KAAK,gBAAgB;AAC/B,UAAI;AAEF,cAAM,eAAe,MAAM,MAAM,IAAI,sBAAsB,EAAE,SAAS,IAAI,CAAE;AAC5E,YAAI,aAAa,KAAK,SAAS;AAE7B,gBAAM,iBAAgB;AACtB,oBAAU,QAAQ,UAAU;AAAA,QAClC,OAAW;AACL,oBAAU,MAAM,YAAY;AAAA,QAC9B;AAAA,MACD,SAAQ,OAAO;AACd,gBAAQ,MAAM,WAAW,KAAK;AAC9B,kBAAU,MAAM,aAAa,MAAM,OAAO;AAAA,MAC5C;AAAA,IACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}