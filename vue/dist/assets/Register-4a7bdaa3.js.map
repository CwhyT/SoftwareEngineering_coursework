{"version":3,"file":"Register-4a7bdaa3.js","sources":["../../src/views/auth/Register.vue"],"sourcesContent":["<template>\n  <div class=\"register-page min-h-screen bg-gray-100 py-16 px-4 sm:px-6 lg:px-8 flex items-center justify-center\">\n    <div class=\"max-w-md w-full space-y-8 bg-white p-10 rounded-lg shadow-md\">\n      <div class=\"text-center\">\n        <h2 class=\"mt-2 text-3xl font-extrabold text-gray-900\">\n          注册账户\n        </h2>\n        <p class=\"mt-3 text-sm text-gray-600\">\n          电动滑板车租赁系统\n        </p>\n      </div>\n      \n      <el-form\n        ref=\"registerFormRef\"\n        :model=\"registerForm\"\n        :rules=\"registerRules\"\n        @submit.prevent=\"handleRegister\"\n        class=\"mt-10 space-y-8\"\n      >\n        <div class=\"space-y-6\">\n          <el-form-item prop=\"username\" class=\"mb-6\">\n            <el-input\n              v-model=\"registerForm.username\"\n              placeholder=\"用户名\"\n              :prefix-icon=\"User\"\n              autocomplete=\"username\"\n              class=\"form-input\"\n            />\n          </el-form-item>\n          \n          <el-form-item label=\"邮箱\" prop=\"email\">\n            <div class=\"verification-code-input\">\n            <el-input \n              v-model=\"registerForm.email\" \n              placeholder=\"请输入邮箱\" \n              :prefix-icon=\"Message\"\n              autocomplete=\"email\"\n            >\n              <template #append>\n                <el-button \n                    class=\"code-button\"\n                  @click=\"sendEmailCode\" \n                  :disabled=\"emailCountdown > 0\" \n                  :loading=\"sendingEmailCode\"\n                >\n                  {{ emailCountdown > 0 ? `${emailCountdown}s` : '获取验证码' }}\n                </el-button>\n              </template>\n            </el-input>\n            </div>\n          </el-form-item>\n          \n          <el-form-item v-if=\"registerForm.emailCode || emailCountdown > 0\" label=\"邮箱验证码\" prop=\"emailCode\">\n            <el-input \n              v-model=\"registerForm.emailCode\" \n              placeholder=\"请输入验证码\" \n              :prefix-icon=\"Key\"\n            />\n            <div class=\"text-xs text-gray-500 mt-1 ml-1\">\n              请前往邮箱查看验证码并填写\n            </div>\n          </el-form-item>\n          \n          <el-form-item label=\"手机号\" prop=\"phone\">\n            <el-input \n              v-model=\"registerForm.phone\" \n              placeholder=\"请输入手机号码\" \n              :prefix-icon=\"Phone\"\n              autocomplete=\"tel\"\n            />\n          </el-form-item>\n          \n          <el-form-item prop=\"password\" class=\"mb-6\">\n            <el-input\n              v-model=\"registerForm.password\"\n              type=\"password\"\n              placeholder=\"密码\"\n              :prefix-icon=\"Lock\"\n              autocomplete=\"new-password\"\n              class=\"form-input\"\n              show-password\n            />\n            <div class=\"text-xs text-gray-500 mt-1 ml-1\">密码长度不能小于6个字符</div>\n          </el-form-item>\n          \n          <el-form-item prop=\"confirmPassword\" class=\"mb-6\">\n            <el-input\n              v-model=\"registerForm.confirmPassword\"\n              type=\"password\"\n              placeholder=\"确认密码\"\n              :prefix-icon=\"Lock\"\n              autocomplete=\"new-password\"\n              class=\"form-input\"\n              show-password\n            />\n          </el-form-item>\n        </div>\n\n        <div class=\"flex items-center ml-1\">\n          <el-checkbox v-model=\"registerForm.agreeTerms\">\n            <span class=\"text-sm\">我已阅读并同意</span>\n            <a href=\"#\" class=\"text-blue-600 hover:text-blue-800 text-sm\">用户协议</a>\n            <span class=\"text-sm\">和</span>\n            <a href=\"#\" class=\"text-blue-600 hover:text-blue-800 text-sm\">隐私政策</a>\n          </el-checkbox>\n        </div>\n\n        <div class=\"mt-8\">\n          <el-button\n            type=\"primary\"\n            native-type=\"submit\"\n            class=\"w-full py-3 text-base\"\n            :loading=\"loading\"\n            :disabled=\"!registerForm.agreeTerms\"\n          >\n            注册\n          </el-button>\n        </div>\n\n        <div class=\"flex items-center justify-center mt-6\">\n          <div class=\"text-sm\">\n            <span class=\"text-gray-600\">已有账户?</span>\n            <router-link to=\"/auth/login\" class=\"ml-1 text-blue-600 hover:text-blue-800\">\n              立即登录\n            </router-link>\n          </div>\n        </div>\n        \n        <div v-if=\"errorMessage\" class=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded\">\n          {{ errorMessage }}\n        </div>\n      </el-form>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref, reactive, onBeforeUnmount } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { User, Lock, Message, Phone, Key } from '@element-plus/icons-vue';\nimport { ElMessage } from 'element-plus';\nimport { useUserStore } from '@/stores/user';\nimport { userApi } from '@/api/user';\n\nconst router = useRouter();\nconst userStore = useUserStore();\nconst registerFormRef = ref(null);\nconst loading = ref(false);\nconst errorMessage = ref('');\nconst emailCountdown = ref(0);\nconst sendingEmailCode = ref(false);\nconst retryAttempts = ref(0);\nconst maxRetryAttempts = 3;\nlet countdownTimer = null;\n\n// 判断是否为开发环境\nconst isDev = ref(import.meta.env.DEV);\n\n// 表单数据\nconst registerForm = reactive({\n  username: '',\n  email: '',\n  emailCode: '',\n  phone: '',\n  password: '',\n  confirmPassword: '',\n  agreeTerms: false\n});\n\n// 密码验证函数\nconst validatePassword = (rule, value, callback) => {\n  if (value === '') {\n    callback(new Error('请输入密码'));\n  } else if (value.length < 6) {\n    callback(new Error('密码长度不能小于6个字符'));\n  } else {\n    if (registerForm.confirmPassword !== '') {\n      registerFormRef.value.validateField('confirmPassword');\n    }\n    callback();\n  }\n};\n\n// 确认密码验证函数\nconst validateConfirmPassword = (rule, value, callback) => {\n  if (value === '') {\n    callback(new Error('请再次输入密码'));\n  } else if (value !== registerForm.password) {\n    callback(new Error('两次输入密码不一致'));\n  } else {\n    callback();\n  }\n};\n\n// 表单验证规则\nconst registerRules = {\n  username: [\n    { required: true, message: '请输入用户名', trigger: 'blur' },\n    { min: 3, max: 20, message: '长度在 3 到 20 个字符', trigger: 'blur' }\n  ],\n  email: [\n    { required: true, message: '请输入邮箱', trigger: 'blur' },\n    { type: 'email', message: '请输入正确的邮箱格式', trigger: 'blur' }\n  ],\n  emailCode: [\n    { required: true, message: '请获取并输入邮箱验证码', trigger: 'blur' },\n    { len: 6, message: '验证码应为6位数字', trigger: 'blur' }\n  ],\n  phone: [\n    { required: true, message: '请输入手机号码', trigger: 'blur' },\n    { pattern: /^1[3-9]\\d{9}$/, message: '请输入有效的手机号码', trigger: 'blur' }\n  ],\n  password: [\n    { validator: validatePassword, trigger: 'blur' }\n  ],\n  confirmPassword: [\n    { validator: validateConfirmPassword, trigger: 'blur' }\n  ],\n  agreeTerms: [\n    { type: 'boolean', message: '请阅读并同意用户协议', trigger: 'change' },\n    { required: true, message: '请阅读并同意用户协议', trigger: 'change' }\n  ]\n};\n\n// 处理注册\nconst handleRegister = () => {\n  registerFormRef.value.validate(async (valid) => {\n    if (!valid) return;\n    \n    loading.value = true;\n    errorMessage.value = '';\n    retryAttempts.value = 0;\n    \n    const tryRegister = async () => {\n      try {\n        console.log('开始注册请求...');\n        \n        // 检查邮箱验证码是否为空\n        if (!registerForm.emailCode) {\n          errorMessage.value = '请先获取并输入邮箱验证码';\n          loading.value = false;\n          return;\n        }\n        \n      // 准备要发送的数据\n      const userData = {\n        name: registerForm.username,  // 名字使用用户名\n        username: registerForm.username,\n        email: registerForm.email,\n        emailCode: registerForm.emailCode,\n        phone: registerForm.phone,\n        password: registerForm.password\n      };\n\n        console.log('发送注册数据:', JSON.stringify(userData));\n      // 使用API服务调用注册\n      const response = await userApi.register(userData);\n        console.log('注册请求成功:', response);\n      const data = response.data || response;\n      \n      // 注册成功，自动登录\n      ElMessage({\n        type: 'success',\n        message: '注册成功，正在自动登录',\n        duration: 1500\n      });\n      \n      // 自动登录\n      if (data.user) {\n      userStore.setUser(data.user);\n      } else {\n        // 如果没有用户数据，创建一个基本的用户对象\n        userStore.setUser({\n          username: userData.username,\n          email: userData.email,\n          role: 'user'\n        });\n      }\n      \n      if (data.token) {\n      userStore.setToken(data.token);\n      }\n      \n      // 跳转到首页\n      router.push('/');\n    } catch (error) {\n        console.error('注册失败详细信息:', error);\n        \n        // 判断是否是网络错误\n        const isNetworkError = !error.response || error.message.includes('Network Error') || error.message.includes('timeout');\n        \n        // 如果是网络错误且未超过最大重试次数，则重试\n        if (isNetworkError && retryAttempts.value < maxRetryAttempts) {\n          retryAttempts.value++;\n          const retryDelay = 1000 * retryAttempts.value; // 递增延迟\n          \n          errorMessage.value = `网络连接不稳定，${retryAttempts.value}秒后自动重试(${retryAttempts.value}/${maxRetryAttempts})...`;\n          \n          await new Promise(resolve => setTimeout(resolve, retryDelay));\n          \n          errorMessage.value = '正在重试连接...';\n          return tryRegister(); // 递归重试\n        }\n        \n      // 处理错误信息\n        if (error.response) {\n          // 服务器响应了，但状态码不是2xx\n          const statusCode = error.response.status;\n          const responseData = error.response.data || {};\n          \n          console.log('服务器响应错误:', statusCode, responseData);\n          \n          if (statusCode === 400) {\n            if (responseData.message && responseData.message.includes('验证码')) {\n              errorMessage.value = responseData.message;\n              // 如果是验证码错误，让用户可以重新获取验证码\n              emailCountdown.value = 0;\n            } else {\n              errorMessage.value = responseData.message || '提交的信息有误，请检查所有字段';\n            }\n          } else if (statusCode === 401 || statusCode === 403) {\n            errorMessage.value = '无权限执行此操作';\n          } else if (statusCode === 404) {\n            errorMessage.value = '请求的资源不存在';\n          } else if (statusCode === 409) {\n            errorMessage.value = responseData.message || '用户名或邮箱已被注册';\n          } else if (statusCode === 422) {\n            errorMessage.value = responseData.message || '验证码错误或已过期';\n            // 如果是验证码错误，让用户可以重新获取验证码\n            emailCountdown.value = 0;\n          } else if (statusCode >= 500) {\n            errorMessage.value = '服务器内部错误，请稍后再试';\n          } else {\n            errorMessage.value = responseData.message || '注册失败，请重试';\n          }\n        } else if (error.request) {\n          // 请求已发送但没有收到响应\n          errorMessage.value = '无法连接到服务器，请检查您的网络连接';\n      } else {\n          // 设置请求时出现问题\n          errorMessage.value = `请求错误: ${error.message}`;\n      }\n    } finally {\n      loading.value = false;\n    }\n    };\n    \n    tryRegister();\n  });\n};\n\n// 添加发送邮箱验证码方法\nconst sendEmailCode = async () => {\n  if (!registerForm.email) {\n    ElMessage.warning('请输入邮箱地址');\n    return;\n  }\n  \n  // 验证邮箱格式\n  if (!/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(registerForm.email)) {\n    ElMessage.warning('请输入有效的邮箱地址');\n    return;\n  }\n  \n  sendingEmailCode.value = true;\n  retryAttempts.value = 0;\n  let emailSent = false;\n  \n  const trySendCode = async () => {\n  try {\n      console.log('开始发送验证码请求...');\n      \n      // 只使用主接口发送验证码\n    const response = await userApi.sendEmailCode(registerForm.email);\n      console.log('验证码请求成功:', response);\n    \n      // 更加灵活地处理响应格式\n      // 只要请求成功返回，无论响应内容如何，都视为验证码发送成功\n      emailSent = true;\n      ElMessage.success(`验证码已发送，请查看您的邮箱收件箱或垃圾邮件文件夹 (${registerForm.email})`);\n      \n      // 移除自动填充验证码的功能\n      if (isDev.value && response.code) {\n        console.log('开发环境验证码(仅控制台显示):', response.code);\n        // 不再自动填充验证码，让用户从真实邮件中获取\n        // registerForm.emailCode = response.code;\n        // ElMessage.info(`开发模式：验证码 ${response.code} 已自动填充`);\n      }\n      \n      // 开始倒计时\n      emailCountdown.value = 60;\n      if (countdownTimer) {\n        clearInterval(countdownTimer);\n      }\n      countdownTimer = setInterval(() => {\n        emailCountdown.value--;\n        if (emailCountdown.value <= 0) {\n          clearInterval(countdownTimer);\n          countdownTimer = null;\n        }\n      }, 1000);\n    } catch (error) {\n      console.error('发送邮箱验证码错误详细信息:', error);\n      \n      // 判断是否是网络错误\n      const isNetworkError = !error.response || error.message.includes('Network Error') || error.message.includes('timeout');\n      \n      // 如果是网络错误且未超过最大重试次数，则重试\n      if (isNetworkError && retryAttempts.value < maxRetryAttempts) {\n        retryAttempts.value++;\n        const retryDelay = 1000 * retryAttempts.value; // 递增延迟\n        \n        ElMessage({\n          type: 'warning',\n          message: `网络连接不稳定，${retryAttempts.value}秒后自动重试(${retryAttempts.value}/${maxRetryAttempts})...`,\n          duration: retryDelay\n        });\n        \n        await new Promise(resolve => setTimeout(resolve, retryDelay));\n        \n        if (!emailSent) {\n          return trySendCode(); // 递归重试\n        }\n    } else {\n    // 显示详细错误信息\n    if (error.response) {\n          const statusCode = error.response.status;\n          const responseData = error.response.data || {};\n          \n          if (statusCode === 400) {\n            ElMessage.error(responseData.message || '邮箱格式不正确');\n          } else if (statusCode === 429) {\n            ElMessage.error(responseData.message || '发送频率过高，请稍后再试');\n          } else if (statusCode >= 500) {\n            ElMessage.error('服务器内部错误，请稍后再试');\n          } else {\n            ElMessage.error(`请求失败(${statusCode}): ${responseData.message || '未知错误'}`);\n          }\n    } else if (error.request) {\n      ElMessage.error('服务器未响应，请检查网络连接');\n    } else {\n      ElMessage.error(`请求错误: ${error.message}`);\n        }\n    }\n  } finally {\n      if (emailSent || retryAttempts.value >= maxRetryAttempts) {\n    sendingEmailCode.value = false;\n  }\n    }\n  };\n  \n  trySendCode();\n};\n\n// 组件卸载前清除计时器\nonBeforeUnmount(() => {\n  if (countdownTimer) {\n    clearInterval(countdownTimer);\n  }\n});\n</script>\n\n<style scoped>\n.form-input :deep(.el-input__wrapper) {\n  border-radius: 0.375rem;\n  box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\n  padding: 8px 12px;\n  height: 46px;\n}\n\n.form-input :deep(.el-input__wrapper.is-focus) {\n  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.3), 0 1px 2px 0 rgba(0, 0, 0, 0.05);\n}\n\n.el-form-item {\n  margin-bottom: 1rem;\n}\n\n:deep(.el-button) {\n  font-size: 16px;\n  padding-top: 10px;\n  padding-bottom: 10px;\n  background-color: var(--color-primary);\n  opacity: 1;\n  border: none;\n}\n\n:deep(.el-button:hover) {\n  background-color: #2563eb;\n  opacity: 1;\n}\n\n/* 验证码按钮样式优化 */\n.verification-code-input :deep(.el-input-group__append) {\n  padding: 0;\n  background-color: transparent;\n  border: none !important;\n  display: block !important;\n  visibility: visible !important;\n  width: auto !important;\n  overflow: visible !important;\n  box-shadow: none !important;\n}\n\n.verification-code-input :deep(.el-input__wrapper) {\n  border-right: none !important;\n  box-shadow: 0 0 0 1px #dcdfe6 inset !important;\n  border-right-color: transparent !important;\n}\n\n.verification-code-input :deep(.code-button) {\n  height: 100%;\n  margin: 0;\n  padding: 0 20px;\n  font-size: 14px;\n  font-weight: 500;\n  border-radius: 0 4px 4px 0;\n  border: none !important;\n  background-color: #f0f7ff !important;\n  color: #3b82f6 !important;\n  transition: all 0.3s;\n  opacity: 1;\n  display: inline-flex !important;\n  align-items: center;\n  justify-content: center;\n  min-width: 120px !important;\n  position: relative;\n  z-index: 10;\n  white-space: nowrap !important;\n  overflow: visible !important;\n  text-overflow: clip !important;\n  box-shadow: none !important;\n  outline: none !important;\n}\n\n.verification-code-input :deep(.code-button:hover:not(:disabled)) {\n  background-color: #e0f0ff !important;\n  color: #2563eb !important;\n}\n\n.verification-code-input :deep(.code-button:disabled) {\n  background-color: #f5f7fa !important;\n  color: #909399 !important;\n  cursor: not-allowed;\n  opacity: 0.8;\n}\n\n.verification-code-input :deep(.el-button span) {\n  display: block !important;\n  visibility: visible !important;\n  color: inherit !important;\n  z-index: 20;\n  position: relative;\n  white-space: nowrap !important;\n  overflow: visible !important;\n  width: auto !important;\n  padding: 0 2px;\n  letter-spacing: normal;\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif;\n  font-weight: 500;\n}\n\n:deep(.el-checkbox__label) {\n  display: inline-flex;\n  align-items: center;\n  flex-wrap: wrap;\n}\n</style> "],"names":[],"mappings":"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"}